{"version":3,"sources":["meteor://ðŸ’»app/packages/raix_stubfence/util.js","meteor://ðŸ’»app/packages/raix_stubfence/nostub.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sF;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sF","file":"/packages/raix_stubfence.js","sourcesContent":["/* global _DDP:true */\n\n_DDP = Package.ddp && Package.ddp.LivedataTest;\n\nif (_DDP) {\n  _DDP = _DDP.Connection && _DDP.Connection.prototype;\n} else {\n  _DDP = Meteor.connection.__proto__; // jshint ignore:line\n}\n\nif (!_DDP) {\n  throw new Error('Arg! Meteor just broke raix:stubfence! Please report to @raix at github, and he will work his butt' +\n    ' off trying to fix this');\n}\n","/* global _DDP:false */\nvar inFence = 0;\n\n_DDP.stubFence = function(names, f) {\n  var self = this;\n\n  if (++inFence !== 1) {\n    inFence--;\n    throw new Error('stubFence cannot lock since another stubFence is running');\n  }\n\n  // Take string or array of string\n  if (names === ''+names) {\n    names = [names];\n  }\n\n  // Carrier for super of methods\n  var supers = {};\n\n  // Store supers\n  _.each(names, function(name) {\n\n    // Check that the method exists\n    if (self._methodHandlers[name]) {\n      supers[name] = self._methodHandlers[name];\n    } else {\n      throw new Error('stubFence could not find method \"' + name + '\"');\n    }\n\n  });\n\n  // Check that we got any supers to stubFence\n  if (names.length) {\n\n    // Remove the stub\n    _.each(supers, function(f, name) {\n      self._methodHandlers[name] = null;\n    });\n\n    // Run the code\n    f();\n\n    // Insert the stub again\n    _.each(supers, function(f, name) {\n      self._methodHandlers[name] = f;\n    });\n  } else {\n    throw new Error('stubFence, no methods found');\n  }\n\n  inFence--;\n};\n\nMongo.Collection.prototype.stubFence = function(f) {\n  var self = this;\n\n  // Make sure we got a collection name\n  if (!self._name) {\n    throw new Error('Dont run stubFence on an annonymous collection');\n  }\n\n  // Make sure we got a connection\n  if (self._connection) {\n    // The main collection methods\n    var collectionMethods = [\n      '/' + self._name + '/insert',\n      '/' + self._name + '/remove',\n      '/' + self._name + '/update'\n    ];\n\n    // Run the connection stubFence\n    self._connection.stubFence(collectionMethods, f);\n\n  } else {\n    throw new Error('Dont run stubFence on a collection with no connection');\n  }\n};\n"]}