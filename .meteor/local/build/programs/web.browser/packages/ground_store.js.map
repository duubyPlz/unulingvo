{"version":3,"sources":["meteor://ðŸ’»app/packages/ground_store/storage.scope.js","meteor://ðŸ’»app/packages/ground_store/client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,sF;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uF","file":"/packages/ground_store.js","sourcesContent":["// Define the Storage scope\nStore = {};","// Users can add multiple storage adapters to Storage, but we might dont care\n// about wich to use, so here we provide a small helper api to the Storage object\n// to get the \"best\" storage available.\n\n// List of possible storage adapters, the best is at the top\nvar _rankedStorageAdapterList = [\n  'localStorage'\n];\n\n// This function will return the name of best storage adapter available.\nvar _getTheBestStorageAdapterAvailable = function() {\n\n  // Iterate over the ranked list of storge adapters\n  for (var i = 0; i < _rankedStorageAdapterList.length; i++) {\n\n    // Set surgestion to the name of a storage adapter\n    var surgestion = _rankedStorageAdapterList[i];\n\n    // If the storage is found then this must be the best storage adapter\n    if (Store[surgestion]) {\n      return surgestion;\n    }\n  }\n\n  // Got nothing, we return null\n  return null;\n};\n\n// This function will return the name of the passed in storage adapter\nvar _getStorageNameFromStorageAdapter = function(storageAdapterInstance) {\n\n  // Iterate over the ranked list of storge adapters\n  for (var i = 0; i <_rankedStorageAdapterList.length; i++) {\n\n    // Set storageAdapterName to the name of a storage adapter\n    var storageAdapterName = _rankedStorageAdapterList[i];\n\n    // StorageAdapter\n    var StorageAdapter = Store[storageAdapterName];\n\n    // Check if the storage adapter is found,\n    if (StorageAdapter) {\n\n      // check if the handed objectis an instance of the storage adapter, if so\n      // return the storage adapter name\n      if (storageAdapterInstance instanceof StorageAdapter) {\n        return storageAdapterName;\n      }\n\n      // We could add a === check allowing a class check\n      if (storageAdapterInstance === StorageAdapter) {\n        return storageAdapterName;\n      }\n\n    }\n  }\n};\n\n// Get the storage name from storage adapter or its instance\nStore.getName = function(storageAdapterInstance) {\n\n  // Tries to find the name of the storage adapter or instance given\n  // returns null if no match\n  return _getStorageNameFromStorageAdapter(storageAdapterInstance);\n\n};\n\n// Returns a storage adapter, either the best on the system or a specific if\n// name is set as an argument.\nStore.getStorage = function(name /* Optional */) {\n\n  // Check if name is set and is a string, if not set it to the best storage\n  // adapter available\n  if (name !== ''+name) {\n    name = _getTheBestStorageAdapterAvailable();\n  }\n\n  // Return the storage by name, if none found then return noop\n  return Store[name] || function() {};\n\n};\n\n// Returns an instance of the best possible storage\nStore.create = function(options) {\n\n  // Get the best storage available\n  var storage = Store.getStorage();\n\n  // Return the instance\n  return new storage(options);\n\n};\n"]}