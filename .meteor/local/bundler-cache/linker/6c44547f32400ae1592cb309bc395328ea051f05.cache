[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar OneTimeout;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// packages/raix_onetimeout/onetimeout.js                             //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nOneTimeout = function(delay) {\n  if (typeof delay === 'undefined') {\n    throw new Error('New api');\n  }\n  // Pointer to Meteor.setTimeout\n  var id = null;\n  // Save the methods into the localstorage\n  return function oneTimeout(f) {\n    // If a timeout is in progress\n    if (id !== null) {\n      // then stop the current timeout - we have updates\n      Meteor.clearTimeout(id);\n    }\n    // Spawn new timeout\n    id = Meteor.setTimeout(function runOneTimeout() {\n      // Ok, we reset reference so we dont get cleared and go to work\n      id = null;\n      // Run function\n      f();\n      // Delay execution a bit\n    }, delay);\n  };\n};\n\n////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['raix:onetimeout'] = {}, {\n  OneTimeout: OneTimeout\n});\n\n})();\n","servePath":"/packages/raix_onetimeout.js","sourceMap":{"version":3,"sources":["/packages/raix_onetimeout/onetimeout.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/raix_onetimeout.js","sourcesContent":["OneTimeout = function(delay) {\n  if (typeof delay === 'undefined') {\n    throw new Error('New api');\n  }\n  // Pointer to Meteor.setTimeout\n  var id = null;\n  // Save the methods into the localstorage\n  return function oneTimeout(f) {\n    // If a timeout is in progress\n    if (id !== null) {\n      // then stop the current timeout - we have updates\n      Meteor.clearTimeout(id);\n    }\n    // Spawn new timeout\n    id = Meteor.setTimeout(function runOneTimeout() {\n      // Ok, we reset reference so we dont get cleared and go to work\n      id = null;\n      // Run function\n      f();\n      // Delay execution a bit\n    }, delay);\n  };\n};\n"]}}]