[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar OneTimeout;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// packages/raix_onetimeout/onetimeout.js                             //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nOneTimeout = function(delay) {                                        // 1\n  if (typeof delay === 'undefined') {                                 // 2\n    throw new Error('New api');                                       // 3\n  }                                                                   // 4\n  // Pointer to Meteor.setTimeout                                     // 5\n  var id = null;                                                      // 6\n  // Save the methods into the localstorage                           // 7\n  return function oneTimeout(f) {                                     // 8\n    // If a timeout is in progress                                    // 9\n    if (id !== null) {                                                // 10\n      // then stop the current timeout - we have updates              // 11\n      Meteor.clearTimeout(id);                                        // 12\n    }                                                                 // 13\n    // Spawn new timeout                                              // 14\n    id = Meteor.setTimeout(function runOneTimeout() {                 // 15\n      // Ok, we reset reference so we dont get cleared and go to work\n      id = null;                                                      // 17\n      // Run function                                                 // 18\n      f();                                                            // 19\n      // Delay execution a bit                                        // 20\n    }, delay);                                                        // 21\n  };                                                                  // 22\n};                                                                    // 23\n                                                                      // 24\n////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['raix:onetimeout'] = {}, {\n  OneTimeout: OneTimeout\n});\n\n})();\n","servePath":"/packages/raix_onetimeout.js","sourceMap":{"version":3,"sources":["/packages/raix_onetimeout/onetimeout.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2E","file":"/packages/raix_onetimeout.js","sourcesContent":["OneTimeout = function(delay) {\n  if (typeof delay === 'undefined') {\n    throw new Error('New api');\n  }\n  // Pointer to Meteor.setTimeout\n  var id = null;\n  // Save the methods into the localstorage\n  return function oneTimeout(f) {\n    // If a timeout is in progress\n    if (id !== null) {\n      // then stop the current timeout - we have updates\n      Meteor.clearTimeout(id);\n    }\n    // Spawn new timeout\n    id = Meteor.setTimeout(function runOneTimeout() {\n      // Ok, we reset reference so we dont get cleared and go to work\n      id = null;\n      // Run function\n      f();\n      // Delay execution a bit\n    }, delay);\n  };\n};\n"]}}]