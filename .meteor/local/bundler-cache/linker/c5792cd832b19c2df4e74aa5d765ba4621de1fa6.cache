[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Reload = Package.reload.Reload;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/appcache/appcache-client.js                                             //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nif (window.applicationCache) {                                                      // 1\n                                                                                    // 2\nvar appCacheStatuses = [                                                            // 3\n  'uncached',                                                                       // 4\n  'idle',                                                                           // 5\n  'checking',                                                                       // 6\n  'downloading',                                                                    // 7\n  'updateready',                                                                    // 8\n  'obsolete'                                                                        // 9\n];                                                                                  // 10\n                                                                                    // 11\nvar updatingAppcache = false;                                                       // 12\nvar reloadRetry = null;                                                             // 13\nvar appcacheUpdated = false;                                                        // 14\n                                                                                    // 15\nReload._onMigrate('appcache', function (retry) {                                    // 16\n  if (appcacheUpdated)                                                              // 17\n    return [true];                                                                  // 18\n                                                                                    // 19\n  // An uncached application (one that does not have a manifest) cannot             // 20\n  // be updated.                                                                    // 21\n  if (window.applicationCache.status === window.applicationCache.UNCACHED)          // 22\n    return [true];                                                                  // 23\n                                                                                    // 24\n  if (!updatingAppcache) {                                                          // 25\n    try {                                                                           // 26\n      window.applicationCache.update();                                             // 27\n    } catch (e) {                                                                   // 28\n      Meteor._debug('applicationCache update error', e);                            // 29\n      // There's no point in delaying the reload if we can't update the cache.      // 30\n      return [true];                                                                // 31\n    }                                                                               // 32\n    updatingAppcache = true;                                                        // 33\n  }                                                                                 // 34\n                                                                                    // 35\n  // Delay migration until the app cache has been updated.                          // 36\n  reloadRetry = retry;                                                              // 37\n  return false;                                                                     // 38\n});                                                                                 // 39\n                                                                                    // 40\n// If we're migrating and the app cache is now up to date, signal that              // 41\n// we're now ready to migrate.                                                      // 42\nvar cacheIsNowUpToDate = function () {                                              // 43\n  if (!updatingAppcache)                                                            // 44\n    return;                                                                         // 45\n  appcacheUpdated = true;                                                           // 46\n  reloadRetry();                                                                    // 47\n};                                                                                  // 48\n                                                                                    // 49\nwindow.applicationCache.addEventListener('updateready', cacheIsNowUpToDate, false);\nwindow.applicationCache.addEventListener('noupdate', cacheIsNowUpToDate, false);    // 51\n                                                                                    // 52\n// We'll get the obsolete event on a 404 fetching the app.manifest:                 // 53\n// we had previously been running with an app cache, but the app                    // 54\n// cache has now been disabled or the appcache package removed.                     // 55\n// Reload to get the new non-cached code.                                           // 56\n                                                                                    // 57\nwindow.applicationCache.addEventListener('obsolete', (function () {                 // 58\n  if (reloadRetry) {                                                                // 59\n    cacheIsNowUpToDate();                                                           // 60\n  } else {                                                                          // 61\n    appcacheUpdated = true;                                                         // 62\n    Reload._reload();                                                               // 63\n  }                                                                                 // 64\n}), false);                                                                         // 65\n                                                                                    // 66\n} // if window.applicationCache                                                     // 67\n                                                                                    // 68\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.appcache = {};\n\n})();\n","servePath":"/packages/appcache.js","sourceMap":{"version":3,"sources":["/packages/appcache/appcache-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yF","file":"/packages/appcache.js","sourcesContent":["if (window.applicationCache) {\n\nvar appCacheStatuses = [\n  'uncached',\n  'idle',\n  'checking',\n  'downloading',\n  'updateready',\n  'obsolete'\n];\n\nvar updatingAppcache = false;\nvar reloadRetry = null;\nvar appcacheUpdated = false;\n\nReload._onMigrate('appcache', function (retry) {\n  if (appcacheUpdated)\n    return [true];\n\n  // An uncached application (one that does not have a manifest) cannot\n  // be updated.\n  if (window.applicationCache.status === window.applicationCache.UNCACHED)\n    return [true];\n\n  if (!updatingAppcache) {\n    try {\n      window.applicationCache.update();\n    } catch (e) {\n      Meteor._debug('applicationCache update error', e);\n      // There's no point in delaying the reload if we can't update the cache.\n      return [true];\n    }\n    updatingAppcache = true;\n  }\n\n  // Delay migration until the app cache has been updated.\n  reloadRetry = retry;\n  return false;\n});\n\n// If we're migrating and the app cache is now up to date, signal that\n// we're now ready to migrate.\nvar cacheIsNowUpToDate = function () {\n  if (!updatingAppcache)\n    return;\n  appcacheUpdated = true;\n  reloadRetry();\n};\n\nwindow.applicationCache.addEventListener('updateready', cacheIsNowUpToDate, false);\nwindow.applicationCache.addEventListener('noupdate', cacheIsNowUpToDate, false);\n\n// We'll get the obsolete event on a 404 fetching the app.manifest:\n// we had previously been running with an app cache, but the app\n// cache has now been disabled or the appcache package removed.\n// Reload to get the new non-cached code.\n\nwindow.applicationCache.addEventListener('obsolete', (function () {\n  if (reloadRetry) {\n    cacheIsNowUpToDate();\n  } else {\n    appcacheUpdated = true;\n    Reload._reload();\n  }\n}), false);\n\n} // if window.applicationCache\n"]}}]