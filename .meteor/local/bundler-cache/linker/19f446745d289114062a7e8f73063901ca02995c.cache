[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar Store;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/ground_store/storage.scope.js                                         //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\n// Define the Storage scope                                                       // 1\nStore = {};                                                                       // 2\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/ground_store/client.js                                                //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\n// Users can add multiple storage adapters to Storage, but we might dont care     // 1\n// about wich to use, so here we provide a small helper api to the Storage object\n// to get the \"best\" storage available.                                           // 3\n                                                                                  // 4\n// List of possible storage adapters, the best is at the top                      // 5\nvar _rankedStorageAdapterList = [                                                 // 6\n  'localStorage'                                                                  // 7\n];                                                                                // 8\n                                                                                  // 9\n// This function will return the name of best storage adapter available.          // 10\nvar _getTheBestStorageAdapterAvailable = function() {                             // 11\n                                                                                  // 12\n  // Iterate over the ranked list of storge adapters                              // 13\n  for (var i = 0; i < _rankedStorageAdapterList.length; i++) {                    // 14\n                                                                                  // 15\n    // Set surgestion to the name of a storage adapter                            // 16\n    var surgestion = _rankedStorageAdapterList[i];                                // 17\n                                                                                  // 18\n    // If the storage is found then this must be the best storage adapter         // 19\n    if (Store[surgestion]) {                                                      // 20\n      return surgestion;                                                          // 21\n    }                                                                             // 22\n  }                                                                               // 23\n                                                                                  // 24\n  // Got nothing, we return null                                                  // 25\n  return null;                                                                    // 26\n};                                                                                // 27\n                                                                                  // 28\n// This function will return the name of the passed in storage adapter            // 29\nvar _getStorageNameFromStorageAdapter = function(storageAdapterInstance) {        // 30\n                                                                                  // 31\n  // Iterate over the ranked list of storge adapters                              // 32\n  for (var i = 0; i <_rankedStorageAdapterList.length; i++) {                     // 33\n                                                                                  // 34\n    // Set storageAdapterName to the name of a storage adapter                    // 35\n    var storageAdapterName = _rankedStorageAdapterList[i];                        // 36\n                                                                                  // 37\n    // StorageAdapter                                                             // 38\n    var StorageAdapter = Store[storageAdapterName];                               // 39\n                                                                                  // 40\n    // Check if the storage adapter is found,                                     // 41\n    if (StorageAdapter) {                                                         // 42\n                                                                                  // 43\n      // check if the handed objectis an instance of the storage adapter, if so   // 44\n      // return the storage adapter name                                          // 45\n      if (storageAdapterInstance instanceof StorageAdapter) {                     // 46\n        return storageAdapterName;                                                // 47\n      }                                                                           // 48\n                                                                                  // 49\n      // We could add a === check allowing a class check                          // 50\n      if (storageAdapterInstance === StorageAdapter) {                            // 51\n        return storageAdapterName;                                                // 52\n      }                                                                           // 53\n                                                                                  // 54\n    }                                                                             // 55\n  }                                                                               // 56\n};                                                                                // 57\n                                                                                  // 58\n// Get the storage name from storage adapter or its instance                      // 59\nStore.getName = function(storageAdapterInstance) {                                // 60\n                                                                                  // 61\n  // Tries to find the name of the storage adapter or instance given              // 62\n  // returns null if no match                                                     // 63\n  return _getStorageNameFromStorageAdapter(storageAdapterInstance);               // 64\n                                                                                  // 65\n};                                                                                // 66\n                                                                                  // 67\n// Returns a storage adapter, either the best on the system or a specific if      // 68\n// name is set as an argument.                                                    // 69\nStore.getStorage = function(name /* Optional */) {                                // 70\n                                                                                  // 71\n  // Check if name is set and is a string, if not set it to the best storage      // 72\n  // adapter available                                                            // 73\n  if (name !== ''+name) {                                                         // 74\n    name = _getTheBestStorageAdapterAvailable();                                  // 75\n  }                                                                               // 76\n                                                                                  // 77\n  // Return the storage by name, if none found then return noop                   // 78\n  return Store[name] || function() {};                                            // 79\n                                                                                  // 80\n};                                                                                // 81\n                                                                                  // 82\n// Returns an instance of the best possible storage                               // 83\nStore.create = function(options) {                                                // 84\n                                                                                  // 85\n  // Get the best storage available                                               // 86\n  var storage = Store.getStorage();                                               // 87\n                                                                                  // 88\n  // Return the instance                                                          // 89\n  return new storage(options);                                                    // 90\n                                                                                  // 91\n};                                                                                // 92\n                                                                                  // 93\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ground:store'] = {}, {\n  Store: Store\n});\n\n})();\n","servePath":"/packages/ground_store.js","sourceMap":{"version":3,"sources":["/packages/ground_store/storage.scope.js","/packages/ground_store/client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,sF;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uF","file":"/packages/ground_store.js","sourcesContent":["// Define the Storage scope\nStore = {};","// Users can add multiple storage adapters to Storage, but we might dont care\n// about wich to use, so here we provide a small helper api to the Storage object\n// to get the \"best\" storage available.\n\n// List of possible storage adapters, the best is at the top\nvar _rankedStorageAdapterList = [\n  'localStorage'\n];\n\n// This function will return the name of best storage adapter available.\nvar _getTheBestStorageAdapterAvailable = function() {\n\n  // Iterate over the ranked list of storge adapters\n  for (var i = 0; i < _rankedStorageAdapterList.length; i++) {\n\n    // Set surgestion to the name of a storage adapter\n    var surgestion = _rankedStorageAdapterList[i];\n\n    // If the storage is found then this must be the best storage adapter\n    if (Store[surgestion]) {\n      return surgestion;\n    }\n  }\n\n  // Got nothing, we return null\n  return null;\n};\n\n// This function will return the name of the passed in storage adapter\nvar _getStorageNameFromStorageAdapter = function(storageAdapterInstance) {\n\n  // Iterate over the ranked list of storge adapters\n  for (var i = 0; i <_rankedStorageAdapterList.length; i++) {\n\n    // Set storageAdapterName to the name of a storage adapter\n    var storageAdapterName = _rankedStorageAdapterList[i];\n\n    // StorageAdapter\n    var StorageAdapter = Store[storageAdapterName];\n\n    // Check if the storage adapter is found,\n    if (StorageAdapter) {\n\n      // check if the handed objectis an instance of the storage adapter, if so\n      // return the storage adapter name\n      if (storageAdapterInstance instanceof StorageAdapter) {\n        return storageAdapterName;\n      }\n\n      // We could add a === check allowing a class check\n      if (storageAdapterInstance === StorageAdapter) {\n        return storageAdapterName;\n      }\n\n    }\n  }\n};\n\n// Get the storage name from storage adapter or its instance\nStore.getName = function(storageAdapterInstance) {\n\n  // Tries to find the name of the storage adapter or instance given\n  // returns null if no match\n  return _getStorageNameFromStorageAdapter(storageAdapterInstance);\n\n};\n\n// Returns a storage adapter, either the best on the system or a specific if\n// name is set as an argument.\nStore.getStorage = function(name /* Optional */) {\n\n  // Check if name is set and is a string, if not set it to the best storage\n  // adapter available\n  if (name !== ''+name) {\n    name = _getTheBestStorageAdapterAvailable();\n  }\n\n  // Return the storage by name, if none found then return noop\n  return Store[name] || function() {};\n\n};\n\n// Returns an instance of the best possible storage\nStore.create = function(options) {\n\n  // Get the best storage available\n  var storage = Store.getStorage();\n\n  // Return the instance\n  return new storage(options);\n\n};\n"]}}]