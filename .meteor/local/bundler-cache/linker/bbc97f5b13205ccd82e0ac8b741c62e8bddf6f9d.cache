[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar Store = Package['ground:store'].Store;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/ground_localstorage/client.js                                                              //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n// This function will test localstorage to see if its actually available and                           // 1\n// working.                                                                                            // 2\nvar _getLocalStorage = function() {                                                                    // 3\n                                                                                                       // 4\n  // Set storage to localStorage - if test fails storage is set to null                                // 5\n  var storage = window.localStorage;                                                                   // 6\n                                                                                                       // 7\n  // We initialize the fail flag defaulting to true                                                    // 8\n  var fail = true;                                                                                     // 9\n                                                                                                       // 10\n  // In the test we test the localstorage api setItem/getItem/removeItem this                          // 11\n  // uid will hopefully prevent any overwriting of existing data                                       // 12\n  var uid = Random.id();                                                                               // 13\n                                                                                                       // 14\n  try {                                                                                                // 15\n    // Use the setItem api                                                                             // 16\n    storage.setItem(uid, uid);                                                                         // 17\n    // Test the getItem api and check if the value could be set and retrieved                          // 18\n    fail = (storage.getItem(uid) !== uid);                                                             // 19\n    // Test removeItem and clean up the test data                                                      // 20\n    storage.removeItem(uid);                                                                           // 21\n                                                                                                       // 22\n    // If the test failed then set the storage to null                                                 // 23\n    if (fail) {                                                                                        // 24\n      storage = null;                                                                                  // 25\n    }                                                                                                  // 26\n                                                                                                       // 27\n  } catch(e) {                                                                                         // 28\n    // Noop, cant do much about it                                                                     // 29\n  }                                                                                                    // 30\n                                                                                                       // 31\n  // Return the tested localstorage                                                                    // 32\n  return storage;                                                                                      // 33\n};                                                                                                     // 34\n                                                                                                       // 35\n// Get storage if available                                                                            // 36\nvar _storage = _getLocalStorage();                                                                     // 37\n                                                                                                       // 38\n                                                                                                       // 39\n// Check to see if we got any localstorage to add                                                      // 40\nif (_storage) {                                                                                        // 41\n                                                                                                       // 42\n  // Create a namespace to track storage name spacing                                                  // 43\n  var _localStorageNS = {};                                                                            // 44\n                                                                                                       // 45\n  // Create a noop function                                                                            // 46\n  var noop = function() {};                                                                            // 47\n                                                                                                       // 48\n  // Prefix convention                                                                                 // 49\n  var _prefix = function(name) {                                                                       // 50\n    return '_storage.' + name;                                                                         // 51\n  };                                                                                                   // 52\n                                                                                                       // 53\n  // Prefix database                                                                                   // 54\n  var _prefixDatabase = function(name) {                                                               // 55\n    return _prefix(name) + '.db.';                                                                     // 56\n  };                                                                                                   // 57\n                                                                                                       // 58\n  // Prefix database record                                                                            // 59\n  var _prefixDatabaseRecord = function(name) {                                                         // 60\n    return _prefix(name) + '.record';                                                                  // 61\n  };                                                                                                   // 62\n                                                                                                       // 63\n  // Helper getting and updating the table record                                                      // 64\n  var _setTableRecord = function(SAInstance, migrationCallback) {                                      // 65\n                                                                                                       // 66\n    // Database record name in localstorage                                                            // 67\n    var recordName = _prefixDatabaseRecord(SAInstance.name);                                           // 68\n                                                                                                       // 69\n    // Get the database record                                                                         // 70\n    var oldRecordString = _storage.getItem(recordName);                                                // 71\n                                                                                                       // 72\n    // Set the default empty record object                                                             // 73\n    var record = {};                                                                                   // 74\n                                                                                                       // 75\n    try {                                                                                              // 76\n                                                                                                       // 77\n      // Get old record object                                                                         // 78\n      record = oldRecordString && EJSON.parse(oldRecordString) || {};                                  // 79\n                                                                                                       // 80\n    } catch(err) {                                                                                     // 81\n      // Noop, cant do much about it, we assume that data is lost                                      // 82\n    }                                                                                                  // 83\n                                                                                                       // 84\n    // Set new version helper                                                                          // 85\n    var newVersion = SAInstance.version;                                                               // 86\n                                                                                                       // 87\n    // Set old version helper                                                                          // 88\n    var oldVersion = record.version || 1.0;                                                            // 89\n                                                                                                       // 90\n    // Update the record                                                                               // 91\n    record.version = SAInstance.version;                                                               // 92\n                                                                                                       // 93\n    try {                                                                                              // 94\n                                                                                                       // 95\n      // Create new record as string                                                                   // 96\n      var newRecordString = EJSON.stringify(record);                                                   // 97\n                                                                                                       // 98\n      // Store the new record                                                                          // 99\n      _storage.setItem(recordName, newRecordString);                                                   // 100\n                                                                                                       // 101\n    } catch(err) {                                                                                     // 102\n      // Noop, cant do much here                                                                       // 103\n    }                                                                                                  // 104\n                                                                                                       // 105\n    migrationCallback.call(SAInstance, {                                                               // 106\n      version: oldVersion                                                                              // 107\n    }, {                                                                                               // 108\n      version: newVersion                                                                              // 109\n    });                                                                                                // 110\n  };                                                                                                   // 111\n                                                                                                       // 112\n  // Yeah, got it - add the api to the Storage global                                                  // 113\n  Store.localStorage = function(options) {                                                             // 114\n    var self = this;                                                                                   // 115\n                                                                                                       // 116\n    if (!(self instanceof Store.localStorage)) {                                                       // 117\n      return new Store.localStorage(self.name);                                                        // 118\n    }                                                                                                  // 119\n                                                                                                       // 120\n    // Inheritance EventEmitter                                                                        // 121\n    self.eventemitter = new EventEmitter();                                                            // 122\n                                                                                                       // 123\n    // Make sure options is at least an empty object                                                   // 124\n    options = options || {};                                                                           // 125\n                                                                                                       // 126\n    // Set the name on the instance                                                                    // 127\n    self.name = options.name;                                                                          // 128\n                                                                                                       // 129\n    // Check to see if the storage is already defined                                                  // 130\n    if (_localStorageNS[self.name]) {                                                                  // 131\n      throw new Error('Storage.localStorage \"' + self.name + '\" is already in use');                   // 132\n    }                                                                                                  // 133\n                                                                                                       // 134\n    // Make sure that the user dont use '.db.'                                                         // 135\n    if (/\\.db\\./.test(self.name)) {                                                                    // 136\n      throw new Error('Storage.localStorage \"' + self.name + '\" contains \".db.\" this is not allowed');\n    }                                                                                                  // 138\n                                                                                                       // 139\n    // Set the size of db 0 === disable quota                                                          // 140\n    // TODO: Implement                                                                                 // 141\n    self.size = options.size || 0;                                                                     // 142\n                                                                                                       // 143\n    // Set version - if this is bumped then the data is cleared pr. default                            // 144\n    // migration                                                                                       // 145\n    self.version = options.version || 1.0;                                                             // 146\n                                                                                                       // 147\n    // Set migration function                                                                          // 148\n    var migrationFunction = options.migration || function(oldRecord, newRecord) {                      // 149\n                                                                                                       // 150\n      // Check storage versions                                                                        // 151\n      if (oldRecord.version !== newRecord.version) {                                                   // 152\n        // We allow the user to customize a migration algoritme but here we just                       // 153\n        // clear the storage if versions mismatch                                                      // 154\n        self.clear(noop);                                                                              // 155\n      }                                                                                                // 156\n    };                                                                                                 // 157\n                                                                                                       // 158\n    // Store the instance                                                                              // 159\n    _localStorageNS[self.name] = self;                                                                 // 160\n                                                                                                       // 161\n                                                                                                       // 162\n    // Set the table record, at the moment this is only handling the version                           // 163\n    _setTableRecord(self, migrationFunction);                                                          // 164\n                                                                                                       // 165\n  };                                                                                                   // 166\n                                                                                                       // 167\n  // Simple helper to return the storage type name                                                     // 168\n  Store.localStorage.prototype.typeName = function() {                                                 // 169\n    return 'localStorage';                                                                             // 170\n  };                                                                                                   // 171\n                                                                                                       // 172\n  Store.localStorage.prototype.prefix = function() {                                                   // 173\n    var self = this;                                                                                   // 174\n    return _prefixDatabase(self.name);                                                                 // 175\n  };                                                                                                   // 176\n                                                                                                       // 177\n  Store.localStorage.prototype.getPrefixedId = function(name) {                                        // 178\n    var self = this;                                                                                   // 179\n    return self.prefix() + name;                                                                       // 180\n  };                                                                                                   // 181\n                                                                                                       // 182\n  //////////////////////////////////////////////////////////////////////////////                       // 183\n  // WRAP LOCALSTORAGE API                                                                             // 184\n  //////////////////////////////////////////////////////////////////////////////                       // 185\n                                                                                                       // 186\n  Store.localStorage.prototype.getItem = function(name, callback) {                                    // 187\n    var self = this;                                                                                   // 188\n                                                                                                       // 189\n    // Check if callback is function                                                                   // 190\n    if (typeof callback !== 'function') {                                                              // 191\n      throw new Error('Storage.localStorage.getItem require a callback function');                     // 192\n    }                                                                                                  // 193\n                                                                                                       // 194\n    try {                                                                                              // 195\n                                                                                                       // 196\n      // Get the string value                                                                          // 197\n      var jsonObj = _storage.getItem(self.getPrefixedId(name));                                        // 198\n                                                                                                       // 199\n      // Try to return the object of the parsed string                                                 // 200\n      callback(null, jsonObj && EJSON.parse(jsonObj) || jsonObj);                                      // 201\n                                                                                                       // 202\n    } catch(err) {                                                                                     // 203\n      // Callback with error                                                                           // 204\n      callback(err);                                                                                   // 205\n                                                                                                       // 206\n    }                                                                                                  // 207\n                                                                                                       // 208\n  };                                                                                                   // 209\n                                                                                                       // 210\n  Store.localStorage.prototype.setItem = function(name, obj, callback) {                               // 211\n    var self = this;                                                                                   // 212\n                                                                                                       // 213\n    // Check if callback is function                                                                   // 214\n    if (typeof callback !== 'function') {                                                              // 215\n      throw new Error('Storage.localStorage.setItem require a callback function');                     // 216\n    }                                                                                                  // 217\n                                                                                                       // 218\n    try {                                                                                              // 219\n                                                                                                       // 220\n      // Stringify the object                                                                          // 221\n      var jsonObj = EJSON.stringify(obj);                                                              // 222\n                                                                                                       // 223\n      // Try to set the stringified object                                                             // 224\n      callback(null, _storage.setItem(self.getPrefixedId(name), jsonObj));                             // 225\n                                                                                                       // 226\n    } catch(err) {                                                                                     // 227\n                                                                                                       // 228\n      // Callback with error                                                                           // 229\n      callback(err);                                                                                   // 230\n                                                                                                       // 231\n    }                                                                                                  // 232\n  };                                                                                                   // 233\n                                                                                                       // 234\n  Store.localStorage.prototype.removeItem = function(name, callback) {                                 // 235\n    var self = this;                                                                                   // 236\n                                                                                                       // 237\n    // Check if callback is function                                                                   // 238\n    if (typeof callback !== 'function') {                                                              // 239\n      throw new Error('Storage.localStorage.removeItem require a callback function');                  // 240\n    }                                                                                                  // 241\n                                                                                                       // 242\n    try {                                                                                              // 243\n                                                                                                       // 244\n      // Try to remove the item                                                                        // 245\n      callback(null, _storage.removeItem(self.getPrefixedId(name)));                                   // 246\n                                                                                                       // 247\n    } catch(err) {                                                                                     // 248\n                                                                                                       // 249\n      // callback with error                                                                           // 250\n      callback(err);                                                                                   // 251\n                                                                                                       // 252\n    }                                                                                                  // 253\n  };                                                                                                   // 254\n                                                                                                       // 255\n  Store.localStorage.prototype.clear = function(callback) {                                            // 256\n    var self = this;                                                                                   // 257\n                                                                                                       // 258\n    // Check if callback is function                                                                   // 259\n    if (typeof callback !== 'function') {                                                              // 260\n      throw new Error('Storage.localStorage.clear require a callback function');                       // 261\n    }                                                                                                  // 262\n                                                                                                       // 263\n    try {                                                                                              // 264\n                                                                                                       // 265\n      // Find all relevant keys for this storage                                                       // 266\n      self.keys(function(err, keys) {                                                                  // 267\n        if (err) {                                                                                     // 268\n                                                                                                       // 269\n          // On error we just callback                                                                 // 270\n          callback(err);                                                                               // 271\n                                                                                                       // 272\n        } else {                                                                                       // 273\n                                                                                                       // 274\n          // Iterate over keys and removing them one by one                                            // 275\n          for (var i=0; i < keys.length; i++) {                                                        // 276\n            self.removeItem(keys[i], noop);                                                            // 277\n          }                                                                                            // 278\n                                                                                                       // 279\n          // Callback                                                                                  // 280\n          callback(null, keys.length);                                                                 // 281\n        }                                                                                              // 282\n      });                                                                                              // 283\n                                                                                                       // 284\n    } catch(err) {                                                                                     // 285\n                                                                                                       // 286\n      // callback with error                                                                           // 287\n      callback(err);                                                                                   // 288\n                                                                                                       // 289\n    }                                                                                                  // 290\n  };                                                                                                   // 291\n                                                                                                       // 292\n  Store.localStorage.prototype.keys = function(callback) {                                             // 293\n    var self = this;                                                                                   // 294\n                                                                                                       // 295\n    // Check if callback is function                                                                   // 296\n    if (typeof callback !== 'function') {                                                              // 297\n      throw new Error('Storage.localStorage.keys require a callback function');                        // 298\n    }                                                                                                  // 299\n                                                                                                       // 300\n    // Result to return                                                                                // 301\n    var result = [];                                                                                   // 302\n                                                                                                       // 303\n    try {                                                                                              // 304\n                                                                                                       // 305\n      // Create the prefix test                                                                        // 306\n      var regex = new RegExp('^' + self.prefix());                                                     // 307\n                                                                                                       // 308\n      for (var i = 0; i < _storage.length; i++) {                                                      // 309\n                                                                                                       // 310\n        // Test if the key is relevant to this store                                                   // 311\n        if (regex.test(_storage.key(i))) {                                                             // 312\n          // Add the name                                                                              // 313\n          result.push(_storage.key(i).replace(regex, ''));                                             // 314\n        }                                                                                              // 315\n      }                                                                                                // 316\n                                                                                                       // 317\n      // Return the result                                                                             // 318\n      callback(null, result);                                                                          // 319\n                                                                                                       // 320\n    } catch(err) {                                                                                     // 321\n                                                                                                       // 322\n      // callback with error                                                                           // 323\n      callback(err);                                                                                   // 324\n                                                                                                       // 325\n    }                                                                                                  // 326\n  };                                                                                                   // 327\n                                                                                                       // 328\n  Store.localStorage.prototype.length = function(callback) {                                           // 329\n    var self = this;                                                                                   // 330\n                                                                                                       // 331\n    // Check if callback is function                                                                   // 332\n    if (typeof callback !== 'function') {                                                              // 333\n      throw new Error('Storage.localStorage.length require a callback function');                      // 334\n    }                                                                                                  // 335\n                                                                                                       // 336\n    try {                                                                                              // 337\n                                                                                                       // 338\n      // Get the keys                                                                                  // 339\n      self.keys(function(error, keys) {                                                                // 340\n                                                                                                       // 341\n        // Return the length                                                                           // 342\n        callback(error, keys && keys.length || null);                                                  // 343\n                                                                                                       // 344\n      });                                                                                              // 345\n                                                                                                       // 346\n    } catch(err) {                                                                                     // 347\n                                                                                                       // 348\n      // callback with error                                                                           // 349\n      callback(err);                                                                                   // 350\n                                                                                                       // 351\n    }                                                                                                  // 352\n  };                                                                                                   // 353\n                                                                                                       // 354\n  Store.localStorage.prototype.toObject = function(callback) {                                         // 355\n    var self = this;                                                                                   // 356\n                                                                                                       // 357\n    // Check if callback is function                                                                   // 358\n    if (typeof callback !== 'function') {                                                              // 359\n      throw new Error('Storage.localStorage.toObject require a callback function');                    // 360\n    }                                                                                                  // 361\n                                                                                                       // 362\n    // Result to return                                                                                // 363\n    var result = {};                                                                                   // 364\n                                                                                                       // 365\n    try {                                                                                              // 366\n                                                                                                       // 367\n      // Create the prefix test                                                                        // 368\n      var regex = new RegExp('^' + self.prefix());                                                     // 369\n                                                                                                       // 370\n      for (var i = 0; i < _storage.length; i++) {                                                      // 371\n        // Helper                                                                                      // 372\n        var key = _storage.key(i);                                                                     // 373\n                                                                                                       // 374\n        // Test if the key is relevant to this store                                                   // 375\n        if (regex.test(key)) {                                                                         // 376\n          try {                                                                                        // 377\n                                                                                                       // 378\n            // Get the string value                                                                    // 379\n            var jsonObj = _storage.getItem(key);                                                       // 380\n                                                                                                       // 381\n            // Try to return the object of the parsed string                                           // 382\n            result[key.replace(regex, '')] = jsonObj && EJSON.parse(jsonObj) || jsonObj;               // 383\n                                                                                                       // 384\n          } catch(err) {                                                                               // 385\n            // NOOP                                                                                    // 386\n          }                                                                                            // 387\n        }                                                                                              // 388\n                                                                                                       // 389\n      }                                                                                                // 390\n                                                                                                       // 391\n      // Return the result                                                                             // 392\n      callback(null, result);                                                                          // 393\n                                                                                                       // 394\n    } catch(err) {                                                                                     // 395\n                                                                                                       // 396\n      // callback with error                                                                           // 397\n      callback(err);                                                                                   // 398\n                                                                                                       // 399\n    }                                                                                                  // 400\n  };                                                                                                   // 401\n                                                                                                       // 402\n  //////////////////////////////////////////////////////////////////////////////                       // 403\n  // WRAP EVENTEMITTER API                                                                             // 404\n  //////////////////////////////////////////////////////////////////////////////                       // 405\n                                                                                                       // 406\n  // Wrap the Event Emitter Api \"on\"                                                                   // 407\n  Store.localStorage.prototype.on = function(/* arguments */) {                                        // 408\n    this.eventemitter.on.apply(this.eventemitter, _.toArray(arguments));                               // 409\n  };                                                                                                   // 410\n                                                                                                       // 411\n  // Wrap the Event Emitter Api \"once\"                                                                 // 412\n  Store.localStorage.prototype.once = function(/* arguments */) {                                      // 413\n    this.eventemitter.once.apply(this.eventemitter, _.toArray(arguments));                             // 414\n  };                                                                                                   // 415\n                                                                                                       // 416\n  // Wrap the Event Emitter Api \"off\"                                                                  // 417\n  Store.localStorage.prototype.off = function(/* arguments */) {                                       // 418\n    this.eventemitter.off.apply(this.eventemitter, _.toArray(arguments));                              // 419\n  };                                                                                                   // 420\n                                                                                                       // 421\n  // Wrap the Event Emitter Api \"emit\"                                                                 // 422\n  Store.localStorage.prototype.emit = function(/* arguments */) {                                      // 423\n    this.eventemitter.emit.apply(this.eventemitter, _.toArray(arguments));                             // 424\n  };                                                                                                   // 425\n                                                                                                       // 426\n                                                                                                       // 427\n  // Add api helpers                                                                                   // 428\n  Store.localStorage.prototype.addListener = Store.localStorage.prototype.on;                          // 429\n  Store.localStorage.prototype.removeListener = Store.localStorage.prototype.off;                      // 430\n  Store.localStorage.prototype.removeAllListeners = Store.localStorage.prototype.off;                  // 431\n                                                                                                       // 432\n  // Add jquery like helpers                                                                           // 433\n  Store.localStorage.prototype.one = Store.localStorage.prototype.once;                                // 434\n  Store.localStorage.prototype.trigger = Store.localStorage.prototype.emit;                            // 435\n                                                                                                       // 436\n                                                                                                       // 437\n                                                                                                       // 438\n  //////////////////////////////////////////////////////////////////////////////                       // 439\n  // WRAP LOCALSTORAGE EVENTHANDLER                                                                    // 440\n  //////////////////////////////////////////////////////////////////////////////                       // 441\n                                                                                                       // 442\n  // This will be a quick test to see if we have any relations to the data                             // 443\n  var _prefixedByUs = new RegExp('^' + _prefix(''));                                                   // 444\n                                                                                                       // 445\n  // Add event handlers                                                                                // 446\n  if (typeof window.addEventListener !== 'undefined') {                                                // 447\n      // Add support for multiple tabs                                                                 // 448\n      window.addEventListener('storage', function(e) {                                                 // 449\n      // Data changed in another tab, it would have updated localstorage, I'm                          // 450\n      // outdated so reload the tab and localstorage - but we test the prefix on the                   // 451\n      // key - since we actually make writes in the localstorage feature test                          // 452\n                                                                                                       // 453\n      // First of lets make sure that it was actually prefixed by us                                   // 454\n      if (e.key && _prefixedByUs.test(e.key)) {                                                        // 455\n                                                                                                       // 456\n        // Okay, this looks familiar, now we try to lookup the storage instance                        // 457\n        // to emit an event on...                                                                      // 458\n                                                                                                       // 459\n        // Remove the prefix                                                                           // 460\n        var noPrefix = e.key.replace(_prefixedByUs, '');                                               // 461\n                                                                                                       // 462\n        // So we know that the name dont contain suffix \".db.\"                                         // 463\n        var elements = noPrefix.split('.db.');                                                         // 464\n                                                                                                       // 465\n        var storageName = elements.shift();                                                            // 466\n                                                                                                       // 467\n        // Get the remaining key                                                                       // 468\n        var key = elements.join('.db.');                                                               // 469\n                                                                                                       // 470\n        // Get the affected storage                                                                    // 471\n        var storageAdapter = _localStorageNS[storageName];                                             // 472\n                                                                                                       // 473\n        if (storageAdapter) {                                                                          // 474\n                                                                                                       // 475\n          // Emit the event on the storage                                                             // 476\n          storageAdapter.emit('storage', {                                                             // 477\n            key: key,                                                                                  // 478\n            newValue: e.newValue && EJSON.parse(e.newValue) || e.newValue,                             // 479\n            oldValue: e.oldValue && EJSON.parse(e.oldValue) || e.oldValue,                             // 480\n            originalKey: e.key,                                                                        // 481\n            updatedAt: new Date(e.timeStamp),                                                          // 482\n            url: e.url,                                                                                // 483\n            storage: storageAdapter                                                                    // 484\n          });                                                                                          // 485\n        }                                                                                              // 486\n                                                                                                       // 487\n      }                                                                                                // 488\n                                                                                                       // 489\n    }, false);                                                                                         // 490\n}                                                                                                      // 491\n                                                                                                       // 492\n}                                                                                                      // 493\n                                                                                                       // 494\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ground:localstorage'] = {};\n\n})();\n","servePath":"/packages/ground_localstorage.js","sourceMap":{"version":3,"sources":["/packages/ground_localstorage/client.js"],"names":[],"mappingsfile":"/packages/ground_localstorage.js","sourcesContent":["// This function will test localstorage to see if its actually available and\n// working.\nvar _getLocalStorage = function() {\n\n  // Set storage to localStorage - if test fails storage is set to null\n  var storage = window.localStorage;\n\n  // We initialize the fail flag defaulting to true\n  var fail = true;\n\n  // In the test we test the localstorage api setItem/getItem/removeItem this\n  // uid will hopefully prevent any overwriting of existing data\n  var uid = Random.id();\n\n  try {\n    // Use the setItem api\n    storage.setItem(uid, uid);\n    // Test the getItem api and check if the value could be set and retrieved\n    fail = (storage.getItem(uid) !== uid);\n    // Test removeItem and clean up the test data\n    storage.removeItem(uid);\n\n    // If the test failed then set the storage to null\n    if (fail) {\n      storage = null;\n    }\n\n  } catch(e) {\n    // Noop, cant do much about it\n  }\n\n  // Return the tested localstorage\n  return storage;\n};\n\n// Get storage if available\nvar _storage = _getLocalStorage();\n\n\n// Check to see if we got any localstorage to add\nif (_storage) {\n\n  // Create a namespace to track storage name spacing\n  var _localStorageNS = {};\n\n  // Create a noop function\n  var noop = function() {};\n\n  // Prefix convention\n  var _prefix = function(name) {\n    return '_storage.' + name;\n  };\n\n  // Prefix database\n  var _prefixDatabase = function(name) {\n    return _prefix(name) + '.db.';\n  };\n\n  // Prefix database record\n  var _prefixDatabaseRecord = function(name) {\n    return _prefix(name) + '.record';\n  };\n\n  // Helper getting and updating the table record\n  var _setTableRecord = function(SAInstance, migrationCallback) {\n\n    // Database record name in localstorage\n    var recordName = _prefixDatabaseRecord(SAInstance.name);\n\n    // Get the database record\n    var oldRecordString = _storage.getItem(recordName);\n\n    // Set the default empty record object\n    var record = {};\n\n    try {\n\n      // Get old record object\n      record = oldRecordString && EJSON.parse(oldRecordString) || {};\n\n    } catch(err) {\n      // Noop, cant do much about it, we assume that data is lost\n    }\n\n    // Set new version helper\n    var newVersion = SAInstance.version;\n\n    // Set old version helper\n    var oldVersion = record.version || 1.0;\n\n    // Update the record\n    record.version = SAInstance.version;\n\n    try {\n\n      // Create new record as string\n      var newRecordString = EJSON.stringify(record);\n\n      // Store the new record\n      _storage.setItem(recordName, newRecordString);\n\n    } catch(err) {\n      // Noop, cant do much here\n    }\n\n    migrationCallback.call(SAInstance, {\n      version: oldVersion\n    }, {\n      version: newVersion\n    });\n  };\n\n  // Yeah, got it - add the api to the Storage global\n  Store.localStorage = function(options) {\n    var self = this;\n\n    if (!(self instanceof Store.localStorage)) {\n      return new Store.localStorage(self.name);\n    }\n\n    // Inheritance EventEmitter\n    self.eventemitter = new EventEmitter();\n\n    // Make sure options is at least an empty object\n    options = options || {};\n\n    // Set the name on the instance\n    self.name = options.name;\n\n    // Check to see if the storage is already defined\n    if (_localStorageNS[self.name]) {\n      throw new Error('Storage.localStorage \"' + self.name + '\" is already in use');\n    }\n\n    // Make sure that the user dont use '.db.'\n    if (/\\.db\\./.test(self.name)) {\n      throw new Error('Storage.localStorage \"' + self.name + '\" contains \".db.\" this is not allowed');\n    }\n\n    // Set the size of db 0 === disable quota\n    // TODO: Implement\n    self.size = options.size || 0;\n\n    // Set version - if this is bumped then the data is cleared pr. default\n    // migration\n    self.version = options.version || 1.0;\n\n    // Set migration function\n    var migrationFunction = options.migration || function(oldRecord, newRecord) {\n\n      // Check storage versions\n      if (oldRecord.version !== newRecord.version) {\n        // We allow the user to customize a migration algoritme but here we just\n        // clear the storage if versions mismatch\n        self.clear(noop);\n      }\n    };\n\n    // Store the instance\n    _localStorageNS[self.name] = self;\n\n\n    // Set the table record, at the moment this is only handling the version\n    _setTableRecord(self, migrationFunction);\n\n  };\n\n  // Simple helper to return the storage type name\n  Store.localStorage.prototype.typeName = function() {\n    return 'localStorage';\n  };\n\n  Store.localStorage.prototype.prefix = function() {\n    var self = this;\n    return _prefixDatabase(self.name);\n  };\n\n  Store.localStorage.prototype.getPrefixedId = function(name) {\n    var self = this;\n    return self.prefix() + name;\n  };\n\n  //////////////////////////////////////////////////////////////////////////////\n  // WRAP LOCALSTORAGE API\n  //////////////////////////////////////////////////////////////////////////////\n\n  Store.localStorage.prototype.getItem = function(name, callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.getItem require a callback function');\n    }\n\n    try {\n\n      // Get the string value\n      var jsonObj = _storage.getItem(self.getPrefixedId(name));\n\n      // Try to return the object of the parsed string\n      callback(null, jsonObj && EJSON.parse(jsonObj) || jsonObj);\n\n    } catch(err) {\n      // Callback with error\n      callback(err);\n\n    }\n\n  };\n\n  Store.localStorage.prototype.setItem = function(name, obj, callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.setItem require a callback function');\n    }\n\n    try {\n\n      // Stringify the object\n      var jsonObj = EJSON.stringify(obj);\n\n      // Try to set the stringified object\n      callback(null, _storage.setItem(self.getPrefixedId(name), jsonObj));\n\n    } catch(err) {\n\n      // Callback with error\n      callback(err);\n\n    }\n  };\n\n  Store.localStorage.prototype.removeItem = function(name, callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.removeItem require a callback function');\n    }\n\n    try {\n\n      // Try to remove the item\n      callback(null, _storage.removeItem(self.getPrefixedId(name)));\n\n    } catch(err) {\n\n      // callback with error\n      callback(err);\n\n    }\n  };\n\n  Store.localStorage.prototype.clear = function(callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.clear require a callback function');\n    }\n\n    try {\n\n      // Find all relevant keys for this storage\n      self.keys(function(err, keys) {\n        if (err) {\n\n          // On error we just callback\n          callback(err);\n\n        } else {\n\n          // Iterate over keys and removing them one by one\n          for (var i=0; i < keys.length; i++) {\n            self.removeItem(keys[i], noop);\n          }\n\n          // Callback\n          callback(null, keys.length);\n        }\n      });\n\n    } catch(err) {\n\n      // callback with error\n      callback(err);\n\n    }\n  };\n\n  Store.localStorage.prototype.keys = function(callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.keys require a callback function');\n    }\n\n    // Result to return\n    var result = [];\n\n    try {\n\n      // Create the prefix test\n      var regex = new RegExp('^' + self.prefix());\n\n      for (var i = 0; i < _storage.length; i++) {\n\n        // Test if the key is relevant to this store\n        if (regex.test(_storage.key(i))) {\n          // Add the name\n          result.push(_storage.key(i).replace(regex, ''));\n        }\n      }\n\n      // Return the result\n      callback(null, result);\n\n    } catch(err) {\n\n      // callback with error\n      callback(err);\n\n    }\n  };\n\n  Store.localStorage.prototype.length = function(callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.length require a callback function');\n    }\n\n    try {\n\n      // Get the keys\n      self.keys(function(error, keys) {\n\n        // Return the length\n        callback(error, keys && keys.length || null);\n\n      });\n\n    } catch(err) {\n\n      // callback with error\n      callback(err);\n\n    }\n  };\n\n  Store.localStorage.prototype.toObject = function(callback) {\n    var self = this;\n\n    // Check if callback is function\n    if (typeof callback !== 'function') {\n      throw new Error('Storage.localStorage.toObject require a callback function');\n    }\n\n    // Result to return\n    var result = {};\n\n    try {\n\n      // Create the prefix test\n      var regex = new RegExp('^' + self.prefix());\n\n      for (var i = 0; i < _storage.length; i++) {\n        // Helper\n        var key = _storage.key(i);\n\n        // Test if the key is relevant to this store\n        if (regex.test(key)) {\n          try {\n\n            // Get the string value\n            var jsonObj = _storage.getItem(key);\n\n            // Try to return the object of the parsed string\n            result[key.replace(regex, '')] = jsonObj && EJSON.parse(jsonObj) || jsonObj;\n\n          } catch(err) {\n            // NOOP\n          }\n        }\n\n      }\n\n      // Return the result\n      callback(null, result);\n\n    } catch(err) {\n\n      // callback with error\n      callback(err);\n\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////\n  // WRAP EVENTEMITTER API\n  //////////////////////////////////////////////////////////////////////////////\n\n  // Wrap the Event Emitter Api \"on\"\n  Store.localStorage.prototype.on = function(/* arguments */) {\n    this.eventemitter.on.apply(this.eventemitter, _.toArray(arguments));\n  };\n\n  // Wrap the Event Emitter Api \"once\"\n  Store.localStorage.prototype.once = function(/* arguments */) {\n    this.eventemitter.once.apply(this.eventemitter, _.toArray(arguments));\n  };\n\n  // Wrap the Event Emitter Api \"off\"\n  Store.localStorage.prototype.off = function(/* arguments */) {\n    this.eventemitter.off.apply(this.eventemitter, _.toArray(arguments));\n  };\n\n  // Wrap the Event Emitter Api \"emit\"\n  Store.localStorage.prototype.emit = function(/* arguments */) {\n    this.eventemitter.emit.apply(this.eventemitter, _.toArray(arguments));\n  };\n\n\n  // Add api helpers\n  Store.localStorage.prototype.addListener = Store.localStorage.prototype.on;\n  Store.localStorage.prototype.removeListener = Store.localStorage.prototype.off;\n  Store.localStorage.prototype.removeAllListeners = Store.localStorage.prototype.off;\n\n  // Add jquery like helpers\n  Store.localStorage.prototype.one = Store.localStorage.prototype.once;\n  Store.localStorage.prototype.trigger = Store.localStorage.prototype.emit;\n\n\n\n  //////////////////////////////////////////////////////////////////////////////\n  // WRAP LOCALSTORAGE EVENTHANDLER\n  //////////////////////////////////////////////////////////////////////////////\n\n  // This will be a quick test to see if we have any relations to the data\n  var _prefixedByUs = new RegExp('^' + _prefix(''));\n\n  // Add event handlers\n  if (typeof window.addEventListener !== 'undefined') {\n      // Add support for multiple tabs\n      window.addEventListener('storage', function(e) {\n      // Data changed in another tab, it would have updated localstorage, I'm\n      // outdated so reload the tab and localstorage - but we test the prefix on the\n      // key - since we actually make writes in the localstorage feature test\n\n      // First of lets make sure that it was actually prefixed by us\n      if (e.key && _prefixedByUs.test(e.key)) {\n\n        // Okay, this looks familiar, now we try to lookup the storage instance\n        // to emit an event on...\n\n        // Remove the prefix\n        var noPrefix = e.key.replace(_prefixedByUs, '');\n\n        // So we know that the name dont contain suffix \".db.\"\n        var elements = noPrefix.split('.db.');\n\n        var storageName = elements.shift();\n\n        // Get the remaining key\n        var key = elements.join('.db.');\n\n        // Get the affected storage\n        var storageAdapter = _localStorageNS[storageName];\n\n        if (storageAdapter) {\n\n          // Emit the event on the storage\n          storageAdapter.emit('storage', {\n            key: key,\n            newValue: e.newValue && EJSON.parse(e.newValue) || e.newValue,\n            oldValue: e.oldValue && EJSON.parse(e.oldValue) || e.oldValue,\n            originalKey: e.key,\n            updatedAt: new Date(e.timeStamp),\n            url: e.url,\n            storage: storageAdapter\n          });\n        }\n\n      }\n\n    }, false);\n}\n\n}\n"]}}]